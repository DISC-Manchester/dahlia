<!DOCTYPE html>
<html lang="en">
	<head>
		<title>timeshare over websocket</title>
		<link rel="stylesheet" href="styles/style.css">
		<script src="scripts/timer.js"></script>
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
	</head>
	<body>
		<div class="top-bar">
			<div class="header">
				<div class="Logo">
					<img id="logo" src="assets/DiscLogo.png" alt="Disc Logo" />
				</div>

				<h1>Dahlia</h1>
			</div>
		</div>
		<div class="container">
			<div id="timer-container">
				<span id="timer">00:00</span>
		</div>
		<div class="timer-buttons">
				<button class="timer-button" onclick="startTimer(300)">Short Break</button>
				<button class="timer-button" onclick="startTimer(900)"> Long Break </button>
				<button class="timer-button" onclick="startTimer(1500)"> work! </button>
				<button class="reset-button" onclick="resetTimer(0)">Reset Timer</button>
		</div>
		
			 
			</div>

			<div class="chat-box">
				<div class="chat-messages" id="chatMessages"></div>
				<div class="user-input">
					<input
						type="text"
						id="messageInput"
						placeholder="Type your message..."
					/>
					<!-- when converting into a module: id.onclick = doChatInstr -->
					<button onclick="doChatInstr()">Send</button>
				</div>
			</div>
		</div>
		<div class="bottom-bar"></div>
	</body>
	<script>
		const session = new WebSocket("ws://localhost:9091/connect");
		const sessionStorage = new Object();
		session.onmessage = function(event) {
			const args = ParseCommandString(event.data);
			switch (args[0]) {
				case "rename": {
					sessionStorage["cid"] = args[3];
					writeToConsole(`you are "${args[3]}".`);
					break;
				}
				case "msg": {
					writeToConsole("* ".concat(args[1]));
					break;
				}
				case "chat": {
					writeToConsole(`<"${args[1]}">: ${args[2]}`);
					break;
				}
				case "adduser": {
					writeToConsole(`<"${args[2]}"> connected`);
					break;
				}
				case "remuser": {
					writeToConsole(`<"${args[1]}"> disconnected`);
					break;
				}
				case "connect": {
					switch(args[1]) {
						case "0": {
							// Failed.
							writeToConsole("Failed to connect to the room.");
							break;
						}
						case "1": {
							// Connected.
							writeToConsole(`args> primaryTime: ${args[2]}, breakTime: ${args[3]}, messages: ${(args[4] === "1") ? "enabled": "disabled"}}`);
							break;
						}
						case "2": {
							// Graceful disconnect
							writeToConsole("Server disconnected gracefully.");
							break;
						}
					}
					break;
				}
				default: {
					writeToConsole(event.data);
				}
			}
		}
		session.onopen = function() {
			Array.from(document.getElementsByClassName("online-only")).forEach(function (elem) {elem.disabled = false});
			/** this is dumb and i'm going to replace this with MUGE's rename command next server update **/
			session.send(EncodeCommandString(["name"]));
		}
		session.onclose = function(event) {
			Array.from(document.getElementsByClassName("online-only")).forEach(function (elem) {elem.disabled = true});
			console.log(event);
			writeToConsole(`disconnected from server, e${event.code}`);
		}
		function doConnectInstr() {
			session.send(EncodeCommandString(["connect", document.getElementById("roomid").value]));
			return;
		}
		function doDisconnectInstr() {
			session.send(EncodeCommandString(["disconnect"]));
			return;
		}
		function doChatInstr() {
			let messageInput = document.getElementById("messageInput");
			if(messageInput.value.trim().length === 0) {
					return;
			}
			session.send(EncodeCommandString(["chat", messageInput.value]));
			return;
		}
		function sendSocket() {
			session.send(document.getElementById("textinput").value);
			return;
		}
		function writeToConsole(input = "") {
			const consolebox = document.getElementById("chatMessages");
			let cb = document.createElement("span");
			cb.textContent = input;
			consolebox.appendChild(cb);
			consolebox.appendChild(document.createElement("br"));
			consolebox.scrollTop = consolebox.scrollHeight;
		}
		const ParseCommandString = function(instruction) {
			if(typeof instruction !== "string") {
				return;
			}
			let position = -1;
			let sections = new Array();

			for(;;) {
				let length = instruction.indexOf('.', position + 1);

				if(length === -1) {
					break;
				}

				position = (parseInt(instruction.slice(position + 1, length)) + length) + 1
				sections.push(instruction.slice(length + 1, position)
					.replace(/&#x27;/g,	"'")
					.replace(/&quot;/g,	'"')
					.replace(/&#x2F;/g,	'/')
					.replace(/&lt;/g,	'<')
					.replace(/&gt;/g,	'>')
					.replace(/&amp;/g,	'&')
				);

				if(instruction.slice(position, position + 1) === ';') {
					break;
				}
			}
			return sections;
		}
		const EncodeCommandString = function(sections) {
			if(Array.isArray(sections) === false) {
				return;
			}
			let instruction = new String();
			const argv = sections;
			for (let argc = 0; argc < sections.length ; argc++) {
				if(typeof sections[argc] !== "string") {
					argv[argc] = sections[argc].toString();
				}
				argv[argc] = argv[argc]
					.replace(/'/g,	"&#x27;")
					.replace(/"/g,	'&quot;')
					.replace(/\//g,	'&#x2F'	)
					.replace(/</g,	'&lt;'	)
					.replace(/>/g,	'&gt;'	)
					.replace(/&/g,	'&amp;'	)
				;
				instruction = instruction.concat(argv[argc].length.toString(), ".", argv[argc])
				instruction += (argc === sections.length - 1) ? ';' : ',';
			}
			return instruction;
		}
	</script>
</html>