<!doctype html>
<html>
	<head>
		<title>timeshare over websocket</title>
		<style>
			#console {
				height:50vh;
				width:100%;
				overflow-y: scroll;
				display:block;
				resize: vertical;
			}
			body, kbd, input, button {
				background: black;
				color: #ccc;
			}
			button {
				border: 1px solid white;
			}
			button:disabled {
				border: 1px solid gray;
				color: dimgray;
			}
		</style>
	</head>
	<body>
		<form id="example-ui-1">
			<fieldset>
			<legend>primary</legend>
			<label for="primary-time-hours">hours</label>
			<input type="number" id="primary-time-hours" name="primary-time-hours" min="0" max="23" value="1">
			<label for="primary-time-minutes">minutes</label>
			<input type="number" id="primary-time-minutes" name="primary-time-minutes" min="0" max="59" value="0">
			</fieldset>
			<fieldset>
			<legend>break</legend>
			<label for="break-time-hours">hours</label>
			<input type="number" id="break-time-hours" name="break-time-hours" min="0" max="23" value="1">
			<label for="break-time-minutes">minutes</label>
			<input type="number" id="break-time-minutes" name="break-time-minutes" min="0" max="59" value="0">
			</fieldset>
			<label for="messages-enabled">Enable messages in room:</label>
			<input type="checkbox" id="messages-enabled" name="messages-enabled">
			<br>
			<input value="Submit" type="button" id="faux-submit">
		</form>
		<div>
			<hr>
			<span id="cid">cid = ?</span>
			<div style="border: 1px solid lightgray;display:inline-flex">
				<input id="roomid" placeholder="room id" />
				<span>&nbsp;</span>
				<button onclick="doJoin()" class="online-only" disabled>join</button>
				<button onclick="doPart()" class="online-only" disabled>part</button>
			</div>
			<br>
			<kbd id="console">
				<span>&gt;</span>
			</kbd>
			<hr>
			<label for="textinput">Send raw message:</label>
			<input id="textinput" class="online-only" disabled />
			<button onclick="sendSocket()" class="online-only" disabled>send</button>
			<div style="border: 1px solid lightgray;display:inline-flex">
				<input id="message-roomid" placeholder="room id" class="online-only" disabled />
				<input id="message-message" placeholder="message" class="online-only" disabled />
				<span>&nbsp;</span>
				<button id="send-message-button" onclick="sendMessage()" class="online-only" disabled>send message</button>
			</div>
		</div>
	</body>
	<script>
		const session = new WebSocket("ws://localhost:9091/connect");
		session.onmessage = function(event) {
			const args = ParseCommandString(event.data);
			switch(args[0]) {
				case "rename": {
					document.getElementById("cid").textContent = args[3];
					writeToConsole(`you are "${args[3]}".`);
					break;
				}
				case "msg": {
					writeToConsole("* ".concat(args[1]));
					break;
				}
				case "chat": {
					writeToConsole(`#${args[1]}:<"${args[2]}"> says: ${args[3]}`);
					break;
				}
				case "adduser": {
					writeToConsole(`#${args[1]}:<"${args[3]}"> joined`);
					break;
				}
				case "remuser": {
					writeToConsole(`#${args[1]}:<"${args[2]}"> left`);
					break;
				}
				case "join": {
					switch(args[1]) {
						case "0": {
							// Failed.
							writeToConsole("Failed to join the room.");
							break;
						}
						case "1": {
							// Connected.
							writeToConsole(`args> primaryTime: ${args[2]}, breakTime: ${args[3]}, messages: ${(args[4] === "1") ? "enabled": "disabled"}}`);
							document.getElementById("send-message-button").disabled = (args[4] === "1") ? false : true;
							break;
						}
					}
					break;
				}
				default: {
					writeToConsole(event.data);
				}
			}
		}
		session.onopen = function() {
			Array.from(document.getElementsByClassName("online-only")).forEach(function (elem) {elem.disabled = false});
			session.send(EncodeCommandString(["name"]));
		}
		session.onclose = function(event) {
			Array.from(document.getElementsByClassName("online-only")).forEach(function (elem) {elem.disabled = true});
			console.log(event);
			writeToConsole("disconnected from server");
		}
		function doJoin() {
			session.send(EncodeCommandString(["join", document.getElementById("roomid").value]));
			return;
		}
		function doPart() {
			session.send(EncodeCommandString(["part", document.getElementById("roomid").value]));
			return;
		}
		function sendMessage() {
			session.send(EncodeCommandString(["chat", document.getElementById("message-roomid").value, document.getElementById("message-message").value]));
			return;
		}
		function sendSocket() {
			session.send(document.getElementById("textinput").value);
			return;
		}
		function writeToConsole(input = "") {
			const consolebox = document.getElementById("console");
			let cb = document.createElement('span');
			cb.textContent = input;
			consolebox.appendChild(cb);
			consolebox.appendChild(document.createElement('br'))
		}
		const ParseCommandString = function(instruction) {
			if(typeof instruction !== "string") {
				return;
			}
			let position = -1;
			let sections = new Array();

			for(;;) {
				let length = instruction.indexOf('.', position + 1);

				if(length === -1) {
					break;
				}

				position = (parseInt(instruction.slice(position + 1, length)) + length) + 1
				sections.push(instruction.slice(length + 1, position)
					.replace(/&#x27;/g,	"'")
					.replace(/&quot;/g,	'"')
					.replace(/&#x2F;/g,	'/')
					.replace(/&lt;/g,	'<')
					.replace(/&gt;/g,	'>')
					.replace(/&amp;/g,	'&')
				);

				if(instruction.slice(position, position + 1) === ';') {
					break;
				}
			}
			return sections;
		}
		const EncodeCommandString = function(sections) {
			if(Array.isArray(sections) === false) {
				return;
			}
			let instruction = new String();
			const argv = sections;
			for (let argc = 0; argc < sections.length ; argc++) {
				if(typeof sections[argc] !== "string") {
					argv[argc] = sections[argc].toString();
				}
				argv[argc] = argv[argc]
					.replace(/'/g,	"&#x27;")
					.replace(/"/g,	'&quot;')
					.replace(/\//g,	'&#x2F'	)
					.replace(/</g,	'&lt;'	)
					.replace(/>/g,	'&gt;'	)
					.replace(/&/g,	'&amp;'	)
				;
				instruction = instruction.concat(argv[argc].length.toString(), ".", argv[argc])
				instruction += (argc === sections.length - 1) ? ';' : ',';
			}
			return instruction;
		}
		document.getElementById("faux-submit").onclick = async function(e) {
			let sentData = new Object();
			sentData.primaryTime = parseInt(document.getElementById("primary-time-hours").value) * 60;
			sentData.primaryTime += parseInt(document.getElementById("primary-time-minutes").value);
			sentData.breakTime = parseInt(document.getElementById("break-time-hours").value) * 60;
			sentData.breakTime += parseInt(document.getElementById("break-time-hours").value); 
			sentData.messagesEnabled = document.getElementById("messages-enabled").checked;
			let request = await fetch("/room-create", {"method": "POST", "headers": {"Content-Type": "application/json"}, "body": JSON.stringify(sentData)})
			let responseData = await response.json();
			console.log(responseData);
			writeToConsole(JSON.stringify(responseData));
		}
	</script>
</html>